<?php

use utils\Internet;
use utils\InternetStatics;
use utils\VKFunctions;


/**
 * –ö–ª–∞—Å—Å –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
 *
 * Class sendToVK
 *
 */
class sendToVK {

    private const PUBLISH_DELAYED_WALL = 60*3;

    /**
     * @throws JsonException
     */
    public static function run(): void{
		$i = 0; // —Å—á–µ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è error code 6
		$maxI = 10;
		$photo = new CURLFile(realpath(__DIR__ . "/" . WorkPhoto::DIR_SAVE . WorkPhoto::NAME_PHOTO_LYCOMER));

		upload:
		$upload = self::uploadFileServer();
		if(isset($upload['response'])) {
			$upload = $upload['response'];

			$load = self::loadFileServer($upload["upload_url"], [
                'photo' => $photo
            ]);

			usleep(500000);
			save:
			$save = self::saveFileServer($load);
			if(isset($save["response"])) {
				$save = $save["response"];

                $responseWallPost = self::createWall($save[0]);
                if(isset($responseWallPost["response"])) {
                    $id = $responseWallPost["response"]["post_id"];

                    $publishGroupId = Loader::getConfig()->getPublishGroupId();
                    echo date("[H:i:s]", time()) . " –ó–∞–ø–∏—Å—å —Å id " . $id . " —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ group_id -> " . $publishGroupId . "!" . PHP_EOL;
                } else {
                    echo "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–æ–º–µ–Ω—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞!" . PHP_EOL;
                    var_dump($responseWallPost);
                }
			} else {
				if(isset($save["error"]) && $save["error"]["error_code"] == 6 && ++$i <= $maxI) {
					usleep(500000);
					goto save;
				} else {
					echo date("[H:i:s]", time()) . " –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –º–µ—Ç–æ–¥–∞ photos.saveWallPhoto!" . PHP_EOL;
					var_dump($save);
				}
			}
		} else {
			if(isset($upload["error"]) && $upload["error"]["error_code"] == 6 && ++$i <= $maxI) {
				usleep(500000);
				goto upload;
			} else {
				echo date("[H:i:s]", time()) . " –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –º–µ—Ç–æ–¥–∞ photos.getWallUploadServer!" . PHP_EOL;
				var_dump($upload);
			}
		}
	}

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞, –∫—É–¥–∞ –∑–∞–ª–∏–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
     *
     * @return array
     * @throws JsonException
     */
	private static function uploadFileServer(): array{
        $publishGroupId = Loader::getConfig()->getPublishGroupId();
        $userToken = Loader::getConfig()->getUserToken();

		return VKFunctions::executeMethod("photos.getWallUploadServer", $userToken,
            [
                "group_id" => $publishGroupId
            ]
        );
	}

	/**
	 * –ó–∞–ª–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
	 *
	 * @param string $url
	 * @param array $params
	 *
	 * @return array
	 */
	private static function loadFileServer(string $url, array $params): array{
        $raw = Internet::requestURL($url, InternetStatics::CUSTOM_REQUEST_POST,
            InternetStatics::CONTENT_TYPE_MULTIPART_FORM_DATA, [], $params);

		return json_decode($raw, true);
	}

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ —Å—Ç–µ–Ω—É
     *
     * @param array $params
     *
     * @return array
     * @throws JsonException
     */
	private static function saveFileServer(array $params): array{
        $publishGroupId = Loader::getConfig()->getPublishGroupId();
        $userToken = Loader::getConfig()->getUserToken();

        $params = array_merge($params, [
			"group_id" => $publishGroupId
		]);

		return VKFunctions::executeMethod("photos.saveWallPhoto", $userToken, $params);
	}

    /**
     * @param array $params
     *
     * @return array
     * @throws JsonException
     */
    private static function createWall(array $params): array{
        $publishGroupId = Loader::getConfig()->getPublishGroupId();
        $userToken = Loader::getConfig()->getUserToken();

		return VKFunctions::executeMethod("wall.post", $userToken,
            [
                'message' => self::returnTextWall(),
                'attachments' => rawurlencode("photo".$params["owner_id"]."_".$params["id"]),
                'owner_id' => rawurlencode( "-".$publishGroupId),
                'from_group' => 1,
                'publish_date' => time()+self::PUBLISH_DELAYED_WALL
            ]);
	}

	/**
	 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞
	 *
	 * @return string
	 */
	private static function returnTextWall(): string{
        return "¬ª –õ–ê–ô–ö–û–ú–ï–† - –ò–¢–û–ì–ò –ú–ï–°–Ø–¶–ê.

#likemer

–ü–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è -

ü•á @id".($id = self::getElementByIndex(0)[0])." (".self::getNameByName($id).");
ü•à @id".($id = self::getElementByIndex(1)[0])." (".self::getNameByName($id).");
ü•â @id".($id = self::getElementByIndex(2)[0])." (".self::getNameByName($id).").";
	}

	/**
	 * @param int $index
	 *
	 * @return null|array [key, value]
	 */
	private static function getElementByIndex(int $index): ?array{
		$i = 0;
		foreach(WorkPhoto::$userLikes as $id => $likes) {
			if($index === $i) {
				return [$id, $likes];
			}
			$i++;
		}
		return null;
	}

	/**
	 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø–æ id, –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –º–∞—Å—Å–∏–≤–µ
	 *
	 * @param int $id
	 *
	 * @return string|null
	 */
	private static function getNameByName(int $id): ?string{
		return WorkPhoto::$userInfo[$id]["name"] ?? null;
	}

}